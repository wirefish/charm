TO DO:

- save avatars periodically and when leaving game

- add command to leave game

- generalize skill rank up, e.g. for proficiencies, using same model as
  gathering

- add/deduct karma cost when (un)learning skills

- vendors

- add combat abilities and spells via learning skills

- require a crafting station to craft

- distribute loot/xp based on contribution

- add a :coin-purse slot for currency; generalize the notion of preferred slots
  for items

- enforce unique constraints, e.g. for currency; add moneychangers, who are
  vendors that let you convert copper <-> silver <-> gold at a nominal rate of
  100 per step.

- flesh out a quest chain for the old hermit in Silverwood: silk, then missing
  earring behind waterfall, then things from copper mine, then kill some boss
  mob (beneath boulder) that killed her son. Completing it all enables the
  player to get her sword for a later quest chain.

- add a quest chain for Nina after the player finds Rhody.

- add more quests in the abandoned copper mine.

- add a quest that starts under the bridge, maybe there is a note in a bottle or
  something.

========================================

COMBAT

Combat is an :activity. When an entity enters combat, its allowed set of actions
is limited until it leaves combat. There are three ways to leave combat: (1)
die, (2) flee, or (3) all your opponents leave combat.

While in combat, a combatant has the following fields set:

- `attack-target` is the ID of the entity currently being targeted by
  autoattacks, and the default target for special attacks.

- `assist-target` is nil or the ID of the entity that is the default target for
  helpful abilities.

- `opponents` is a list of the IDs of all enemies with whom the avatar is in
  combat. For a monster it is a list of (target-id . threat-level).

In addition, the combatant's :activity behavior implements its periodic attacks.
For an avatar these are auto-attacks with the main-hand weapon.

For a monster, during each auto-attack cycle the monster may select a different
target (based on threat-level) and/or a different attack, based on how it
implements the select-attack generic function.

An avatar enters combat using either the `attack` command or the `assist`
command, or when an aggressive monster attacks on its own.

The `attack` command sets `attack-target`, adds the target to `opponents` if it
isn't already there, and starts the combat behavior if it isn't already running.

The `assist` command sets `assist-target`, sets `attack-target` (if not already
set) to that of the assisted entity, and merges the assisted entity's
`opponents` into the avatar's `opponents`. It also starts the combat behavior if
necessary.

When any entity exits combat:

- Its :activity behavior is stopped.

- For each entity in its `opponents` list, it is removed from that entity's
  `opponents`.

- Its `opponents`, `attack-target`, and `assist-target` are cleared.

When a monster dies, it exits combat as described above. If an avatar's
`opponents` becomes empty, the avatar exits combat as well. Otherwise a new
attack target is selected from its remaining opponents.

When an avatar dies, it exits combat as described above. It a monster's
`opponents` becomes empty, that monster exits combat as well.

When an avatar attempts to exit a location, monsters in its opponents list have
the opportunity to block its way via the usual can-exit-location hook. If the
avatar is allowed to leave, every monster in its `opponents` gets a free "attack
of opportunity" with bonuses (no block, no dodge, increased crit chance?) before
the avatar actually leaves and exits combat.

Some actions cannot be used in combat (actually, when any :activity behavior is
running):

- NPC interactions like talk, skill, buy, sell, ...

Performing an action (other than help and social actions like say, yell, chat)
while in combat:

- uses energy or mana, based on the action

- triggers a cooldown before another combat action can be performed.

Many actions are instant, others take time (e.g. a spell with a cast time)
before they complete. The cooldown begins once the action completes. Also,
auto-attacks are paused during a non-instant action.

The cooldown is shown using a small pie/clock widget at the right end of the
command entry box, or maybe a yellow bar above it? Once it expires, maybe show a
message like "You are now ready to perform another action."

For an avatar with an off-hand weapon, the combat :activity could also perform
off-hand attacks but using the delay of the main-hand weapon. Or just use the
larger of the two delays.

A monster's attacks slot defines a set of possible attacks, each with a
probability and a cooldown. Each tick it selects its next attack based on the
probabilities of those that are off cooldown.

Combat abilities can be invoked via skill-specific commands (e.g. kick, punch,
bash, ...) or, if spells, via the "cast" command, alias "!". Actually maybe
everything can be used either way, spells might have a command equivalent (e.g.
"magmis" for "magic missile"). Also, in "cast", normal token matching rules
occur against your known skills. So you could type any of:

      cast mag mis
      magmis
      !magic missile at/on goblin

Skill-specific commands don't know up in the generic "help" output, at least
until you learn them. But the skills appear in "skill list" and typing "help
<skill>" works.

The mana cost of an ability is expressed as a fraction of base mana. Base mana
is calculated based on race and level, without accounting for modifiers due to
auras or equipment. Efficacy is also scaled by level.

Energy cost is a fixed amount, since max energy doesn't scale with level.

========================================

COMBAT ATTRIBUTES

Combat relies on three resources:

- health: Hit points. When they hit zero, you die.Regenerates slowly in combat,
  faster out of combat. Computed based on base-health, level, and vitality.

- energy: A resource used to perform physical actions, including movement.
  Regenerates quickly in or out of combat. Computed based on base-energy and
  spirit.

- mana: A resource used to cast spells and perform actions. Regenerates slowly
  in or out of combat. Computed based on base-mana, level, and insight.

In addition to the above resources, armor is a key attribute. It Reduces damage
from physical and elemental attacks. It is computed by combining (racial)
natural armor with the armor modifiers of equipment.

Primary attributes that naturally scale with level:

- strength: Increases physical damage done.

- intellect: Increases elemental and magical damage done.

- vitality: Increases health.

- toughness: Increases armor.

Secondary attributes that do not scale with level:

- willpower: Decreases incoming magical damage.

- compassion: Increases healing done.

- precision: Increases chance of a critical hit with any attack or heal.
  Defaults to 5%.

- ferocity: Increases multiplier applied to a critical effect. Defaults to 1.5.

- evasion: Increases chance to dodge an attack. Defaults to 5%.

- accuracy: Reduces miss chance. Defaults to 5%.

- spirit: Increases energy.

- insight: Increases mana.

- resilience: Increases regen rate for health, energy, and mana.

Attributes occur on equipment and may be modified based on race, traits, and
auras.

Each attribute is simply scaled and added to its associated value or modifier,
sometimes with a cap. For example, every 20 precision increase critical chance
by 1%, capped at a total of 25% (at 400 precision).

Instead of a hard cap, there could be diminishing returns past some point.

Finally, a combatant may have immunities to different damage types. These are
just values taken "off the top" from each incoming attack, like DR in D&D.

Armor is different than other attributes for a couple reasons. First, it is
directly found on armor pieces in quantities directly based on item type (e.g.
light or heavy armor) and level. Second, toughness (which directly increases
armor) is subject to the usual modifier bodget for items and it is convenient to
allow it to scale differently than armor.

========================================

CRAFTING

Crafting skills have ranks. Crafting something increases your rank, just as with
gathering.

Each crafting skill includes recipes that are automatically gained based on rank.

There are also recipes you can discover in the world, e.g. find and read a book,
if you have high enough rank. So an avatar needs to track these learned recipes
separately from skill rank.

Crafting skills can chain to allow specialization, e.g.

    weaponsmithing (100/100 ranks) -> sword crafting

In this case higher-level swords require the specialized skill, whereas
weaponsmithing lets you make all kinds of (lower-level) weapons.

The actual act of crafting requires an appropriate crafting station, which
itself must have a high enough "rank" for the recipe to be crafted. Crafting
stations are scattered around the world; the higher-rank ones may be in
harder-to-reach places.

Crafting also requires that an appropriate tool be equipped, just as with
gathering.

The "craft" command lets you say what you want to create, which determines the
base materials required, and what optional materials you want to add in order to
increase quality or control attributes of the final item. Learning the effects
of optional materials is a trial-and-error process, maybe with some hints from
crafting trainers and the like.

For example:

    "craft iron ingot" -- requires smelting skill, uses 3 iron ore

    "craft iron shortsword with fire shard" -- requires weaponsmithing skill,
      uses 2 iron ingot and 1 pine lumber as required materials; the fire shard
      adds fire immunity

    "craft diamond ring with amethyst and turquoise" -- requires jewelcrafting
      skill, uses a diamond and a gold ingot, the two added materials add e.g.
      precision and compassion.

Note that multiple additional materials are allowed, each adds some attribute
according to the item budget. Some added materials instead increase quality.
(Perhaps a quality increase is required in order to add attributes, if 0-quality
items have no attribute budget?)

The parser needs to be extended to support "and"- and ","-separated lists in a
command argument, as in the "with/using" clause of the "craft" command.

After typing "craft", you see a message like "Your attempt to craft ~a will use
~a. You have a ~d% chance of success. Type `accept` to begin crafting." The
message lists all the materials used. The success chance is based on your rank
relative to the required rank, and decreases with each added material. Failure
has a chance of losing materials.

If you are missing materials, the message says "You are missing the following
materials needed to craft ~a: ~a." and doesn't offer the craft attempt.

You can use a quantity to craft multiple items, e.g. "craft 99 iron ingots".
When you do so, the message shows all materials used/missing. The success chance
is applied for each single item. The time taken scales linearly, or maybe you
get a speed-up for each item past the first up to some limit. You see a result
message after each individual item.

When you type "accept" your :activity changes to crafting, which takes a few
seconds and fails if interrupted. You can use "stop" to stop without failure.
While crafting, show a "cooldown" bar/widget as with other non-instant tasks.

You can (rarely) proc a free quality upgrade, based on your rank relative to the
required rank and perhaps attributes of your tool. Your tool can also reduce the
crafting time.

The materials needed for quality/attributes vary based on item level and general
type. They are typically crafted items themselves, e.g. a jewel cut from a raw
gemstone. For example, for accessories you might have a matrix like:

level    quality-1    quality-2    quality-3    quality-4    quality-5
 1-10    X
11-20    X            X
21-30    X            X            X
31-40    X            X            X            X
41-50    X            X            X            X            X

Where X denotes some added material. Note that higher qualities are not
necessarily available at lower levels. Also, materials for higher qualities
become *much* harder and more expensive to obtain. Often the material for
quality N is crafted using, in part, one or more of the material for quality
N-1.
